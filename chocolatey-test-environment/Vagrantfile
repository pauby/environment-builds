#
# VM CONFIG
#
vm_config = {
  memory: 4096,
  cpus: 2
}

#
# PLUGINS CHECK
#
REQUIRED_PLUGINS = %w(vagrant-reload)
exit unless REQUIRED_PLUGINS.all? do |plugin|
  Vagrant.has_plugin?(plugin) || (
    puts "The #{plugin} plugin is required. Please install it with:"
    puts "$ vagrant plugin install #{plugin}"
    false
  )
end

#
# START
#
# http://docs.vagrantup.com/v2/vagrantfile/machine_settings.html
Vagrant.configure("2") do |config|

  folder_syncs = [
    { local: 'auto-install', remote: '/auto-install' },
    { local: '../resources/packages', remote: '/resources/packages' },
    { local: '../shared/shell',              remote: '/shell' }
  ]

  config.vm.box = "stefanscherer/windows_10"
#  config.vm.box_version = "2018.10.03"


  config.vm.provider "vmware_desktop" do |v, override|
    override.vm.box = "my-chocolatey-test-environment"
    override.vm.box_version = ''
  end

  config.vm.box_check_update = false

  config.windows.halt_timeout = 60
  config.winrm.retry_limit = 30
  config.winrm.retry_delay = 10

  config.winrm.username = "vagrant"
  config.winrm.password = "vagrant"

  config.vm.guest = :windows

  config.vm.communicator = "winrm"

  config.vm.network :forwarded_port, guest: 3389, host: 3389, id: "rdp", auto_correct: true

  # config.vm.network :forwarded_port, guest: 5985, host: 5985, id: "winrm", auto_correct: true, host_ip: "127.0.0.1"
  # config.vm.network :forwarded_port, guest: 3389, host: 3389, id: "rdp", auto_correct: true, host_ip: "127.0.0.1"
  # config.vm.network :forwarded_port, guest: 22, host: 2222, id: "ssh", auto_correct: true, host_ip: "127.0.0.1"

  config.vm.provision "Preparing Windows ...", type: "shell", path: "../shared/shell/PrepareWindows.ps1", privileged: true
  installChocoArgs = "-UseLocalSource"
  config.vm.provider :libvirt do |libvirt|
    if ENV['INTERNAL_CHOCOLATEY_PACKAGES_PATH'] != nil
      installChocoArgs = "-UseLocalSource -LocalSourcePath #{ENV['INTERNAL_CHOCOLATEY_PACKAGES_PATH']}"
    end
  end
  config.vm.provision "Installing and configuring Chocolatey CLI ...", type: "shell", path: "../shared/shell/InstallChocolatey.ps1", args: installChocoArgs, privileged: true
  config.vm.provision "Disabling taskbar clock ...", type: "shell", path: "../shared/shell/DisableTaskbarClock.ps1", privileged: true
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    choco source add -n=auto-install -s"c:\\auto-install" --priority=5

    # To set the background to #004568 we need to also blank the default wallpaper value
    # See https://www.rapidtables.com/web/color/RGB_Color.html to convert to RGB
    Set-ItemProperty -Path 'HKCU:Control Panel\\Colors' -Name 'Background' -Value '9 59 134'
    Set-ItemProperty -Path 'HKCU:Control Panel\\Desktop' -Name 'Wallpaper' -Value ''
  SHELL
  #config.vm.provision :shell, :path => "../shared/shell/InstallBGInfo.ps1", privileged: true

  # When choco installs it indicates it requires a reboot so to start with a clean VM, reboot after all the setup is done
  #config.vm.provision :reload

$packageTestScript = <<SCRIPT
setx.exe trigger 1  # run arbitrary win32 application so LASTEXITCODE is 0
$ErrorActionPreference = "Stop"
$env:PATH +=";$($env:SystemDrive)\\ProgramData\\chocolatey\\bin"
# https://github.com/chocolatey/choco/issues/512
$validExitCodes = @(0, 1605, 1614, 1641, 3010)

Write-Output "Testing package if a line is uncommented."
# THIS IS WHAT YOU CHANGE
# - uncomment one of the two and edit it appropriately
# - See the README for details
#choco.exe install -fdvy INSERT_NAME --version INSERT_VERSION  --allow-downgrade
#choco.exe install -fdvy INSERT_NAME  --allow-downgrade --source "'c:\\auto-install;c:\\packages;http://chocolatey.org/api/v2/'"

$exitCode = $LASTEXITCODE

Write-Host "Exit code was $exitCode"
if ($validExitCodes -contains $exitCode) {
  Exit 0
}

Exit $exitCode
SCRIPT

  config.vm.provision :shell, :inline => $packageTestScript, privileged: true

  config.vm.provider "vmware_desktop" do |v, override|
    v.gui = false
    v.linked_clone = true
    v.vmx["memsize"] = vm_config[:memory]
    v.vmx["numvcpus"] = vm_config[:cpus]

    v.vmx["ethernet0.virtualDev"] = "vmxnet3"
    v.vmx["RemoteDisplay.vnc.enabled"] = "false"
    v.vmx["RemoteDisplay.vnc.port"] = "5900"
    v.vmx["scsi0.virtualDev"] = "lsisas1068"
    v.enable_vmrun_ip_lookup = false
    v.whitelist_verified = true
    v.vmx["hgfs.linkRootShare"] = "FALSE"
  end

  config.vm.provider :virtualbox do |virtualbox, override|
    virtualbox.gui = true
    virtualbox.customize ["modifyvm", :id, "--memory", vm_config['memory']]
    virtualbox.customize ["modifyvm", :id, "--cpus", vm_config['cpus']]
    virtualbox.customize ["modifyvm", :id, "--vram", 128]
    virtualbox.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    virtualbox.customize ["modifyvm", :id, "--audio", "none"]
    virtualbox.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
    virtualbox.customize ["modifyvm", :id, "--draganddrop", "hosttoguest"]
    virtualbox.customize ["modifyvm", :id, "--usb", "off"]
    virtualbox.linked_clone = true if Vagrant::VERSION >= '1.8.0'

    folder_syncs.each do |folder|
      override.vm.synced_folder folder[:local], folder[:remote]
    end
  end

  config.vm.provider :hyperv do |hyperv, override|
    override.vm.network "public_network", bridge: "Default Switch"

    hyperv.enable_virtualization_extensions = true
    hyperv.maxmemory = vm_config['memory']
    hyperv.cpus = vm_config['cpus']
    hyperv.ip_address_timeout = 130
    hyperv.linked_clone = true
    hyperv.vm_integration_services = {
      guest_service_interface: true,
      heartbeat: true,
      key_value_pair_exchange: true,
      shutdown: true,
      time_synchronization: true,
      vss: true
    }

    smbcreds_filename = '../secret-vagrant-smb.txt'
    if File.exists?(smbcreds_filename)
      file_data = File.read(smbcreds_filename).split
      smbusername = file_data[0]
      smbpassword = file_data[1]
    elsif ENV['VAGRANT_HYPERV_SMB_USERNAME'] != nil and ENV['VAGRANT_HYPERV_SMB_PASSWORD'] != nil
      smbusername = ENV['VAGRANT_HYPERV_SMB_USERNAME']
      smbpassword = ENV['VAGRANT_HYPERV_SMB_PASSWORD']
    end

    # if these are not set and Hyper-V is used then username and password will be prompted for
    if smbusername != nil and smbpassword != nil
      folder_syncs.each do |folder|
        #print "Folder sync local: #{folder[:local]} | remote: #{folder[:remote]} | smb_username: #{folder[:smb_username]} | smb_password: #{folder[:smb_password]}"
        override.vm.synced_folder folder[:local], folder[:remote], smb_username: smbusername, smb_password: smbpassword
      end
    end

      override.vm.provision "Stop SMB Idle Disconnects", type: 'shell', run: 'once', privileged: true, inline: 'net config server /autodisconnect:-1'
  end # hyper-v provider

  config.vm.provider :libvirt do |libvirt, override|
    # See https://vagrant-libvirt.github.io/vagrant-libvirt/configuration.html
    libvirt.memory = vm_config["memory"]
    libvirt.cpus = vm_config["cpus"]

    #! getting shared folders from libvirt host to a windows guest is difficult and I havent
    #! quite worked out how best to do it.
    override.vm.synced_folder '/.', '/vagrant', disabled: true

    #! I don't think we need this - C$ is shared by default
    # override.vm.provision "Create network share 'Share' on 'c:\\share'", type: "shell", privileged: false, inline: <<-SHELL
    #   # create a network share so that we can connect and share files via a remote SMB share
    #   if (-not (Test-Path -Path 'c:\\share')) {
    #     New-Item -Path 'c:\\share' -ItemType Directory -Force
    #   }
    #   net share Share=c:\\share /grant:everyone,full
    # SHELL

    # libvirt.driver = 'kvm'
    # libvirt.connect_via_ssh = false
    # libvirt.username = 'root'
    # libvirt.storage_pool_name = 'default'

    # # Enable Hyper-V enlightments: https://blog.wikichoon.com/2014/07/enabling-hyper-v-enlightenments-with-kvm.html
    # # Also see https://github.com/kubevirt/kubevirt/issues/1919#issue-396952226 
    # libvirt.hyperv_feature :name => 'relaxed',  :state => 'on'
    # libvirt.hyperv_feature :name => 'vapic',    :state => 'on'
    # libvirt.hyperv_feature :name => 'stimer',   :state => 'on'
    # libvirt.hyperv_feature :name => 'synic',    :state => 'on'
    # libvirt.hyperv_feature :name => 'vapic',    :state => 'on'
    # libvirt.hyperv_feature :name => 'vpindex',  :state => 'on'
    # libvirt.hyperv_feature :name => 'frequencies',  :state => 'on'
    # libvirt.hyperv_feature :name => 'reenlightenment',  :state => 'on'
    # libvirt.hyperv_feature :name => 'tlbflush',  :state => 'on'

  end # libvirt provider
end
