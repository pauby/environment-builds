unless Vagrant.has_plugin?("vagrant-reload")
  raise 'vagrant-reload is not installed!'
end

Vagrant.configure("2") do |config|

    #
    # Variables
    #
    folder_syncs = [
      { local: 'auto-install',          remote: '/auto-install' },
      { local: '../resources/packages', remote: '/packages' },
      { local: '../resources/licenses', remote: '/licenses' },
      { local: '../shell',              remote: '/shell' }
    ]

  config.vm.define "win2016", autostart: false

  config.windows.halt_timeout = 60
  # https://github.com/hashicorp/vagrant/issues/6430
  config.winrm.retry_limit = 30
  config.winrm.retry_delay = 10

  config.winrm.username = "vagrant"
  config.winrm.password = "vagrant"
  config.vm.guest = :windows
  config.vm.communicator = "winrm"

  config.windows.set_work_network = true

  config.vm.network :forwarded_port, guest: 5985, host: 5985, id: "winrm", auto_correct: true, host_ip: "127.0.0.1"
  config.vm.network :forwarded_port, guest: 3389, host: 3389, id: "rdp", auto_correct: true, host_ip: "127.0.0.1"
  config.vm.network :forwarded_port, guest: 22, host: 2222, id: "ssh", auto_correct: true, host_ip: "127.0.0.1"

  folder_syncs.each do |folder|
      #print "Folder sync local: #{folder[:local]} | remote: #{folder[:remote]} | smb_username: #{folder[:smb_username]} | smb_password: #{folder[:smb_password]}"
      config.vm.synced_folder folder[:local], folder[:remote]
  end

  config.vm.provision :shell, :path => "../shell/ConfigureAutoLogin.ps1", privileged: true
  config.vm.provision :shell, :path => "../shell/PrepareWindows.ps1", privileged: true
  config.vm.provision :shell, :path => "../shell/SetRegion.ps1", args: "-Region 'UK'", privileged: true
  config.vm.provision :shell, :path => "../shell/InstallChocolatey.ps1", args: "-UseLocalSource", run: "once", privileged: true
  config.vm.provision :shell, :path => "../shell/NotifyGuiAppsOfEnvironmentChanges.ps1", privileged: true
  config.vm.provision :shell, :path => "../shell/InstallVMGuestTools.ps1", privileged: true
  config.vm.provision :shell, :path => "../shell/InstallStandardApps.ps1", privileged: true
  config.vm.provision :shell, :path => "../shell/InstallBGInfo.ps1", privileged: true

  config.vm.provision "Add auto-install Chocolatey Source", type: "shell", run: "once", privileged: true, inline: <<-SHELL
    choco source add -n=auto-install -s"c:\\auto-install" --priority=5
  SHELL

  # reload machine to have the auto-login and bginfo kick in
  config.vm.provision :reload

  config.vm.post_up_message = "All done!"

  config.vm.provider :virtualbox do |v, override|
    #override.vm.network :private_network, ip: "10.10.13.14"
    v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    v.gui = true
    v.customize ["modifyvm", :id, "--cpus", "1"]
    # turn on nested virtualization
    v.customize ["modifyvm", :id, "--nested-hw-virt", "off"]
    v.customize ["modifyvm", :id, "--vram", 128]
    v.customize ["modifyvm", :id, "--memory", "2048"]
    v.customize ["modifyvm", :id, "--audio", "none"]
    v.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
    v.customize ["modifyvm", :id, "--draganddrop", "hosttoguest"]
    v.customize ["modifyvm", :id, "--usb", "off"]
    # linked clones for speed and size
    v.linked_clone = true if Vagrant::VERSION >= '1.8.0'
  end

  # https://www.vagrantup.com/docs/hyperv/configuration.html
  # https://technet.microsoft.com/en-us/library/dn798297(v=ws.11).aspx
  config.vm.provider :hyperv do |v, override|
    override.vm.network "public_network", bridge: "Default Switch"
    v.enable_virtualization_extensions = false
    v.maxmemory = 2048
    v.cpus = 1
    v.ip_address_timeout = 130
    v.linked_clone = true
    v.vm_integration_services = {
      guest_service_interface: true,
      heartbeat: true,
      key_value_pair_exchange: true,
      shutdown: true,
      time_synchronization: true,
      vss: true
    }

    smbcreds_filename = '../vagrant-smb.txt'
    if File.exists?(smbcreds_filename)
      file_data = File.read(smbcreds_filename).split
      smbusername = file_data[0]
      smbpassword = file_data[1]

      folder_syncs.each do |folder|
        #print "Folder sync local: #{folder[:local]} | remote: #{folder[:remote]} | smb_username: #{folder[:smb_username]} | smb_password: #{folder[:smb_password]}"
        override.vm.synced_folder folder[:local], folder[:remote], smb_username: smbusername, smb_password: smbpassword
      end
    end # hyper-v providwr

    override.vm.provision "Stop SMB Idle Disconnects", type: 'shell', run: 'once', privileged: true, inline: 'net config server /autodisconnect:-1'
  end

  config.vm.define "win2016" do |win2016|
    win2016.vm.box = "StefanScherer/windows_2016"

    win2016.vm.hostname = "choco-win2016"

  end # win2016

  config.vm.define "win10" do |win10|
    win10.vm.box = "StefanScherer/windows_10"

    win10.vm.hostname = "choco-win10"

  end # win10

  config.vm.define "win2012r2" do |win2012r2|
    win2012r2.vm.box = "devopsguys/Windows2012R2Eval"

    win2012r2.vm.hostname = "choco-win2012r2"
  end # win2012r2
end